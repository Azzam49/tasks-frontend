
---------------------------------------------------------------------------
STATUS = DONE
1_feature/clean-up-react-files-for-fresh-start

https://nodejs.org/en

nvm install 20

nvm use 20

node -v

npx create-react-app tasks-frontend

cd tasks-frontend

npm start
---------------------------------------------------------------------------




---------------------------------------------------------------------------
STATUS = DONE
2_feature/integrate-bootstrap-5

https://getbootstrap.com/docs/5.3/getting-started/introduction/

https://github.com/twbs/bootstrap

https://www.npmjs.com/package/bootstrap

npm install bootstrap@v5.3.3 @popperjs/core

import 'bootstrap/dist/css/bootstrap.min.css';
import 'bootstrap/dist/js/bootstrap.bundle.min.js';
---------------------------------------------------------------------------



---------------------------------------------------------------------------
STATUS = DONE
3_feature/first-page-login-form

DONE:
- add login form on App.js


Notes:
- Make sure to add a closing brackets on elements as <input> at the end to get it working, example :
    - <input type="email" class="form-control" id="floatingInput" placeholder="name@example.com"/>
    - before fix is not end with brackets as :
    - <input type="email" class="form-control" id="floatingInput" placeholder="name@example.com">
- Replace all 'class' by 'className'
- Replace images import by:
    - import logo from './assets/images/bootstrap-logo.svg';
    - <img className="mb-4" src={logo} alt="" width="72" height="57"/>
---------------------------------------------------------------------------


---------------------------------------------------------------------------
STATUS = DONE
4_feature/move-login-page-as-a-react-component

DONE:
- move login form on sperate component

Notes:
- (rafce -> shortcut to arrow function with export)
    - requires to download this VsCode extenstion :
        - ES7+ React/Redux/React-Native snippets
        - by : dsznajder
---------------------------------------------------------------------------



---------------------------------------------------------------------------
STATUS = DONE
5_feature/setup-react-router-dom

DONE:
- set url for login form as '/login'
- create home page that have 'dashboard' content
- set url for home page as '/'

Notes:
- require install 'npm install react-router-dom'
---------------------------------------------------------------------------


---------------------------------------------------------------------------
STATUS = DONE
6_feature/use-navigate-for-go-to-home-from-login-page

DONE:
- import and use useNavigate
- navigate to '/' home page after clicked on login button
---------------------------------------------------------------------------


---------------------------------------------------------------------------
STATUS = WORKING-ON
7_feature/add-the-header-component

TODO:
- use the header element from template
- place it on component and use it on the App.js
---------------------------------------------------------------------------


---------------------------------------------------------------------------
STATUS = DONE
8_feature/add-the-sidebar-component

DONE:
- use the sidebar component from template
- fix html elements of the sidebar component
- place it on component and use it on the App.js
- fix layout so that all pages uses the header & sidebar components
---------------------------------------------------------------------------

---------------------------------------------------------------------------
STATUS = DONE
9_feature/apply-the-sidebar-component-with-react-route

DONE :
- fix layout so that all pages uses the header & sidebar components
---------------------------------------------------------------------------


---------------------------------------------------------------------------
STATUS = DONE
10_feature/add-datatable-on-tasks-page

DONE :
- add datatable on tasks page
- integrate it correctly and check if its working (eg. it's search field works)

1 - npm install jquery datatables.net datatables.net-bs5
    - https://www.npmjs.com/package/jquery
    - https://www.npmjs.com/package/datatables.net
    - https://www.npmjs.com/package/datatables.net-bs5
2 - import table from tasks.html to Tasks.js and replace those:
    - xlink:href to xLinkHref
    - class= to className=
    - style="width:100%" to style={{width: "100%"}}
---------------------------------------------------------------------------

---------------------------------------------------------------------------
STATUS = DONE
11_feature/use-usestate-on-tasks-datatable-records

DONE :
- store the default datatable records on useState
- use a loop to display the useState records on datatable
---------------------------------------------------------------------------


---------------------------------------------------------------------------
STATUS = DONE
12_feature/on-tasks-page-databable-set-the-correct-badge-color-on-status-column-for-tasks

DONE :
- set the correct class name to control color of badge depending on the status of the task
---------------------------------------------------------------------------

---------------------------------------------------------------------------
STATUS = DONE
13_feature/add-create-new-task-modal-on-tasks-page

DONE :
- add create new task button on tasks page
- open dialog of create new task by click on button

1 - After copy create task modal:
    - replace class= with className=
    - add closing / for <input> element
    - replace for= with htmlFor=
---------------------------------------------------------------------------

---------------------------------------------------------------------------
STATUS = WORKING-ON
14_feature/create-component-for-task-modal-form

WORKING-ON :
- move the dialog form model of task on a sperate component
- use it on create task
- use it on edit task button of datatable (Tasks page)
---------------------------------------------------------------------------

---------------------------------------------------------------------------
STATUS = CANCELLED
15_feature/reuse-the-task-model-component-for-edit-task

CANCELLED :
- make component dynamic with props to be used for both create or edit a task
- make the edit button on datatable to open the model with correct record to edit
---------------------------------------------------------------------------

---------------------------------------------------------------------------
STATUS = DONE
15_feature/fix-sidebar-highlight-on-active-page

DONE :
- Make the highlight css effect on sidebar to follow active page
---------------------------------------------------------------------------

---------------------------------------------------------------------------
STATUS = DONE
16_feature/move-tasks-datatable-as-a-component

DONE :
- Create component for tasks datatable
- Set edit and delete buttons of datatable as props
- Use the datatable on Tasks page
---------------------------------------------------------------------------


---------------------------------------------------------------------------
STATUS = DONE
17_feature/move-taskdatable-assets-into-the-components-file

DONE :
- Move datatable assets and initiating useEffect inside TaskDatatable component
---------------------------------------------------------------------------


---------------------------------------------------------------------------
STATUS = DONE
18_feature/use-taskdatatable-component-for-pending-tasks-page

DONE :
- Use TaskDatatable component for the PendingTasks page
---------------------------------------------------------------------------


---------------------------------------------------------------------------
STATUS = DONE
19_feature/add-markdone-column-on-taskdatatable-component-to-serve-pending-tasks-page

DONE :
- Add Markdone on TaskDatatable
---------------------------------------------------------------------------


---------------------------------------------------------------------------
STATUS = DONE
20_feature/use-taskdatatable-component-for-completed-tasks-page

DONE :
- Use TaskDatatable component for the CompletedTasks page
---------------------------------------------------------------------------


---------------------------------------------------------------------------
STATUS = DONE
21_feature/move-icons-of-taskdatatable-as-a-component

DONE :
- Create DatatableIcons component for icons used by all tasks datatables
- Use it where needed
---------------------------------------------------------------------------


---------------------------------------------------------------------------
STATUS = DONE
22_feature/read-task-tags-from-usestate

DONE :
- Create useState to store the task tags
- Use the useState tags on the tags dropdown selection
---------------------------------------------------------------------------



---------------------------------------------------------------------------
STATUS = DONE
23_feature/using-the-backend-api-to-read-the-tasks

DONE:
- Call backend api for reading the tasks
- Use the tasks from api on Tasks page datatable
---------------------------------------------------------------------------


---------------------------------------------------------------------------
STATUS = DONE
24_feature/using-the-backend-api-to-read-the-tags

DONE :
- Call backend api for reading the tags and using it on Tasks page
---------------------------------------------------------------------------


---------------------------------------------------------------------------
STATUS = DONE
25_feature/orgnize-the-api-calling

DONE:
- Add common async/await function that takes url and return response data
    - explain about async/await : https://chatgpt.com/share/4555ad3b-a24a-4963-b8e3-da91d877f299
- Use the common function for tasks,tags data on Tasks page
---------------------------------------------------------------------------


---------------------------------------------------------------------------
STATUS = DONE
26_feature/using-the-backend-api-to-delete-task-on-tasks-page

DONE:
- Add common function to delete objects by api
- Use the function to delete task on Tasks page

Correction :
    export async function deleteData(apiURL) {
        try {
            await fetch('http://localhost:8000/' + apiURL, {
                method: 'DELETE'
            });
        } catch (error) {
            console.error(`Error deleting ${apiURL}:`, error);
        }
    }
---------------------------------------------------------------------------


---------------------------------------------------------------------------
STATUS = DONE
27_feature/add-notifcation-on-delete-task

DONE:
- install react-toastify
    - https://www.npmjs.com/package/react-toastify
    - npm i react-toastify
    - https://fkhadra.github.io/react-toastify/introduction/
- setup the react-toastify on project
- use it on deleteTask action to notify users

Correction:
    notifySuccess('Task was updated successfully!')
    and not 'User was...'
---------------------------------------------------------------------------


---------------------------------------------------------------------------
STATUS = DONE
28_feature/using-the-backend-post-api-to-create-task

DONE:
- use the backend post api to create task on Tasks page
---------------------------------------------------------------------------


---------------------------------------------------------------------------
STATUS = DONE
29_feature/close-modal-after-creating-task-and-refresh-datatable

DONE:
- close the bootstrap modal after submit successfully to create task by api
- refresh datatable so user live can see his new record addded to the datatable
---------------------------------------------------------------------------


---------------------------------------------------------------------------
STATUS = DONE
30_feature/using-the-backend-put-api-to-update-task

DONE:
- use the backend put api to update task on Tasks page
---------------------------------------------------------------------------


---------------------------------------------------------------------------
STATUS = DONE
31_feature/adding-apis-for-pending-tasks-page

DONE:
- use api to populate datatable with pending tasks data
- use the backend change-status-completed api to update task on PendingTasks page
---------------------------------------------------------------------------


---------------------------------------------------------------------------
STATUS = DONE
32_feature/adding-apis-for-completed-tasks-page

DONE:
- use api to populate datatable with completed tasks data
- use the backend api to delete task on completed tasks page
---------------------------------------------------------------------------


---------------------------------------------------------------------------
STATUS = DONE
33_bugfix/fix-updating-same-task-on-tasks-page

DONE:
- if updating same task on tasks page to display it on modal, on second time the task values won't show on the modal fields
---------------------------------------------------------------------------


---------------------------------------------------------------------------
STATUS = DONE
34_feature/function-login-page-to-send-token-request

DONE:
- setup user login context to control between login and dashboard pages
- login page to use username & password fields for sending api request to fetch the token

- Note : ALSO remove this from the App.js `<Route path="/login" element={<Login />} />`
---------------------------------------------------------------------------


---------------------------------------------------------------------------
STATUS = DONE
35_feature/add-validation-and-notification-on-login-page

DONE:
- validate username and password must have value
- setup notify alert to be avilable for login page
- send warning notify if username/password are missing value
- send notify if api call not success eg.(wrong password, server not up)
---------------------------------------------------------------------------


---------------------------------------------------------------------------
STATUS = DONE
36_feature/use-token-on-all-api-requests

DONE:
- make all api requests to use the token
---------------------------------------------------------------------------


---------------------------------------------------------------------------
STATUS = DONE
37_feature/function-the-logout-button-and-redirect-to-login-page-if-api-is-unautherized

DONE:
- DONE: make logout button to remove token and redirect to login page
- DONE: make any api request and return response code as (401 or 403) to remove token and redirect to login page
- DONE: test all those functions and all the tasks app to make sure everything works as expected
---------------------------------------------------------------------------


---------------------------------------------------------------------------
STATUS = DONE
38_feature/fix-notifcation-and-standardlize-them-from-api-controller

DONE:
- currently if create task with fields empty, it will hit error and notify as success, so this need fix by:
    - controlling all notifcations from api controller, to control weather to send success/error notfication bases on api response

BE branch supportig this : 21_bugfix/fix-response-of-task-to-completed-api
---------------------------------------------------------------------------

---------------------------------------------------------------------------
STATUS = DONE
39_feature/add-and-integrate-register-user-page

DONE:
- integrate the html register user page
- modify user context to control to able display the register-page/login-page
- control fields of register user page and add validation (2 password fields must match)
- use register user api to be able to create user

STEPS:
- DONE : copy the whole the main element from the register.html
    (and fix the following):
    - add closing '/' on input element
    - add closing '/' on img element
    - fix the src attribute on img element
    - replace 'for=' by 'htmlFor='
- DONE : fix user context to control displaying between login and register pages
- DONE : fix <a/> element on login page
- DONE : fix <a/> element on register page
- DONE : set fields control on register page using react useState
- DONE : add handleSubmit and fields validation:
    - (2 password fields must match)
    - check other validation and do testing
- DONE : send api request from register page to create user
- CANCELLED : if api request user created successfully, auto navigate to login page
    - note : cancelled because switching to other page using window.href.location won't let the notifcation display as page refreshes

BE branch supportig this : 23_feature/remove-authentication-required-from-register-user-api
---------------------------------------------------------------------------


---------------------------------------------------------------------------
STATUS = DONE
40_feature/dashboard-page-adding-card-component

DONE:
- add card component
- use 3 cards on dashboard to display info about ticket's status

STEPS:
- copy card elements from html template to the react page
    - the copy includes <div class="container"> & <div class="row">
    - replace class= with className=
    - replace style="max-width: 18rem;" with style={{ maxWidth: '18rem' }}

TODO FUTURE : check and use code sample of the branch '43_bugfix/fix-data-and-placeholders-of-the-dashboard-charts'
---------------------------------------------------------------------------


---------------------------------------------------------------------------
STATUS = DONE
41_feature/dashboard-page-adding-charts

DONE:
- install chart js for react
- add circled chart component on dashboard

STEPS:
- https://www.npmjs.com/package/react-chartjs-2
- https://react-chartjs-2.js.org/examples/
- npm i react-chartjs-2 chart.js

TODO FUTURE : check and use code sample of the branch '43_bugfix/fix-data-and-placeholders-of-the-dashboard-charts'
---------------------------------------------------------------------------


---------------------------------------------------------------------------
STATUS = DONE
42_bugfix/fix-empty-space-on-pages-on-mobile-screens

DONE:
- fix css sidebar that make empty space for mobile screens
---------------------------------------------------------------------------

---------------------------------------------------------------------------
STATUS = DONE
43_bugfix/fix-data-and-placeholders-of-the-dashboard-charts

DONE:
- have better data examples and placeholders on the charts component

Note : have 2 pull requests (No.21 & 22)
---------------------------------------------------------------------------

---------------------------------------------------------------------------
STATUS = DONE
44_feature/store-username-and-user-id-on-user-context-and-use-them-on-task-create-and-on-dashboard-welcome

DONE:
- store username and user-id on user context from token api
- use username on welcome dashboard title
- use user-id on task create/update apis

Note : may want to split on (2-3 lectures)
---------------------------------------------------------------------------


---------------------------------------------------------------------------
STATUS = DONE
45_feature/use-charts-data-api-on-dashboard

DONE:
- use charts api on dashboard

Note : may record this before the lecture 44_feature/store-username-and-user-id-on-user-context-and-use-them-on-task-create-and-on-dashboard-welcome
--------------------------------------------------------------------------

---------------------------------------------------------------------------
STATUS = DONE
46_feature/add-404-not-found-page

DONE:
- Add 404 not found page
---------------------------------------------------------------------------


---------------------------------------------------------------------------
STATUS = TODO
47_bugfix/fix-tag-value-on-task-create-and-update-apis

TODO:
- Fix tag on create and update to assign correct tag_id value
---------------------------------------------------------------------------


---------------------------------------------------------------------------
STATUS = FUTURE
?_feature/orgnize-the-code

TODO:
- move re-used functions on common files
- todo : review and check things to orgnize the code
---------------------------------------------------------------------------


---------------------------------------------------------------------------
STATUS = FUTURE
?_feature/add-notify-error-message-if-api-hits-error

eg.:
    - on create task if description field is empty api will return error
---------------------------------------------------------------------------